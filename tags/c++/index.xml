<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on yokaze.github.io</title>
    <link>https://yokaze.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on yokaze.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Rue Yokaze</copyright>
    <lastBuildDate>Sun, 28 Jan 2018 19:48:59 +0900</lastBuildDate>
    
	<atom:link href="https://yokaze.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>clang で range-based for の暗黙コピーを警告する (-Wrange-loop-analysis)</title>
      <link>https://yokaze.github.io/2018/01/28/</link>
      <pubDate>Sun, 28 Jan 2018 19:48:59 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/28/</guid>
      <description>clang で range-based for の暗黙コピーを警告するには、-Wrange-loop-analysis オプションを指定します。 次の例では const pair&amp;lt;const int, int&amp;gt;&amp;amp; で値を受け取るべきと</description>
    </item>
    
    <item>
      <title>clang で負のビットシフトを警告する (-Wshift-count-negative)</title>
      <link>https://yokaze.github.io/2018/01/18/</link>
      <pubDate>Thu, 18 Jan 2018 22:55:39 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/18/</guid>
      <description>clang で負のビットシフトを警告するには、-Wshift-count-negative オプションを指定します。 #include &amp;lt;stdio.h&amp;gt; int main() { int x = 8; int y = x &amp;lt;&amp;lt; -1; printf(&amp;quot;%d\n&amp;quot;, y); }</description>
    </item>
    
    <item>
      <title>clang で 暗黙の符号変換を警告する (-Wsign-conversion)</title>
      <link>https://yokaze.github.io/2018/01/17/</link>
      <pubDate>Wed, 17 Jan 2018 20:41:18 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/17/</guid>
      <description>clang で暗黙の符号変換を警告するには、-Wsign-conversion オプションを指定します。 int main() { unsigned int x = -1; } $ # macOS Sierra (10.12) $ clang sample.cpp -Wsign-conversion sample.cpp:3:22: warning: implicit conversion changes signedness:</description>
    </item>
    
    <item>
      <title>clang で 64bit 整数から 32bit 整数への暗黙の型変換を警告する (-Wshorten-64-to-32)</title>
      <link>https://yokaze.github.io/2018/01/16/</link>
      <pubDate>Tue, 16 Jan 2018 21:24:17 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/16/</guid>
      <description>clang で 64bit 整数から 32bit 整数への暗黙の型変換を警告するには、-Wshorten-64-to-32 オプションを指定します。 #include &amp;lt;stdint.h&amp;gt; int main() { int64_t x = 1; int32_t y = x; }</description>
    </item>
    
    <item>
      <title>lldb で使えるコマンド一覧</title>
      <link>https://yokaze.github.io/2018/01/06/</link>
      <pubDate>Sat, 06 Jan 2018 14:01:24 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/06/</guid>
      <description>lldb で入力できるコマンドをまとめました。 lldb のコマンド一覧（英語）は help コマンドで表示できます。 日本語訳は新規に書き起こしました。 $ # macOS Sierra (10.12) + Homebrew $</description>
    </item>
    
    <item>
      <title>clang で未使用のマクロを警告する (-Wunused-macros)</title>
      <link>https://yokaze.github.io/2017/10/06/</link>
      <pubDate>Fri, 06 Oct 2017 17:51:02 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/06/</guid>
      <description>clang で未使用のマクロを警告するには、-Wunused-macros オプションを指定します。 #define MY_UNUSED_MACRO int main(void) { return 0; } $ # macOS Sierra (10.12) + Homebrew $ clang sample.cpp -Wunused-macros sample.cpp:1:9: warning: macro is not used [-Wunused-macros]</description>
    </item>
    
    <item>
      <title>clang でマクロの再定義を警告する (-Wmacro-redefined)</title>
      <link>https://yokaze.github.io/2017/09/21/</link>
      <pubDate>Thu, 21 Sep 2017 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/21/</guid>
      <description>clang でマクロの再定義を警告するには、-Wmacro-redefined オプションを指定します。 #define MY_DEFINE 111 #define MY_DEFINE 222 int main(void) { return 0; } $ # macOS Sierra (10.12) + Homebrew $ clang sample.cpp -Wmacro-redefined sample.cpp:2:9:</description>
    </item>
    
    <item>
      <title>boost::indices の解説</title>
      <link>https://yokaze.github.io/2017/09/13/</link>
      <pubDate>Wed, 13 Sep 2017 23:00:13 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/13/</guid>
      <description>前回 の続きです。 boost::indices は、boost::multi_array の部分ビューを作るためのオブジェクトです。 部分ビューでは、元の配列の一部を仮想的な</description>
    </item>
    
    <item>
      <title>boost::extents の解説</title>
      <link>https://yokaze.github.io/2017/09/11/</link>
      <pubDate>Mon, 11 Sep 2017 21:57:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/11/</guid>
      <description>boost::extents は、boost::multi_array の各次元の有効なインデックス範囲を指定するためのオブジェクトです。 #include &amp;lt;boost/multi_array.hpp&amp;gt; int main() { boost::multi_array&amp;lt;float, 2&amp;gt; arr(boost::extents[10][20]); return 0; } また、ex</description>
    </item>
    
    <item>
      <title>Boost.MultiArray の添字演算子について</title>
      <link>https://yokaze.github.io/2017/08/18/</link>
      <pubDate>Fri, 18 Aug 2017 18:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/08/18/</guid>
      <description>Boost.MultiArray が添え字の境界チェックをしているのかよく分からなかったので、調べてみた。 リファレンスには次のように書かれている。 By default, the array access methods operator() and operator[] perform range checking. If</description>
    </item>
    
  </channel>
</rss>