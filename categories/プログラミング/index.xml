<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング on yokaze.github.io</title>
    <link>https://yokaze.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in プログラミング on yokaze.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Rue Yokaze</copyright>
    <lastBuildDate>Thu, 21 Sep 2017 18:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://yokaze.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>clang でマクロの再定義を警告する (-Wmacro-redefined)</title>
      <link>https://yokaze.github.io/2017/09/21/</link>
      <pubDate>Thu, 21 Sep 2017 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/21/</guid>
      <description>clang でマクロの再定義を警告するには、-Wmacro-redefined オプションを指定します。 #define MY_DEFINE 111 #define MY_DEFINE 222 int main(void) { return 0; } $ # macOS Sierra (10.12) + Homebrew $ clang sample.cpp -Wmacro-redefined sample.cpp:2:9:</description>
    </item>
    
    <item>
      <title>Python でインストール済みモジュールをデバッグする</title>
      <link>https://yokaze.github.io/2017/09/19/</link>
      <pubDate>Tue, 19 Sep 2017 21:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/19/</guid>
      <description>pdb, pip などのインストール済みモジュールを直接デバッグする方法。 モジュールの動作を細かく調べたい時に役立ちます。 $ # 強引に書くとおこられる $ python3 -m</description>
    </item>
    
    <item>
      <title>Homebrew で python3 用の Boost.Python をインストールする</title>
      <link>https://yokaze.github.io/2017/09/15/</link>
      <pubDate>Fri, 15 Sep 2017 18:34:38 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/15/</guid>
      <description>$ brew install boost-python --with-python3 なのだが、すこしハマりどころがある。 brew install boost-python のオプション brew install にはオプションを指定できる場合がある。 boost-python の場合は --with-python3 オプションが使える。 brew</description>
    </item>
    
    <item>
      <title>boost::indices の解説</title>
      <link>https://yokaze.github.io/2017/09/13/</link>
      <pubDate>Wed, 13 Sep 2017 23:00:13 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/13/</guid>
      <description>前回 の続きです。 boost::indices は、boost::multi_array の部分ビューを作るためのオブジェクトです。 部分ビューでは、元の配列の一部を仮想的な</description>
    </item>
    
    <item>
      <title>boost::extents の解説</title>
      <link>https://yokaze.github.io/2017/09/11/</link>
      <pubDate>Mon, 11 Sep 2017 21:57:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/11/</guid>
      <description>boost::extents は、boost::multi_array の各次元の有効なインデックス範囲を指定するためのオブジェクトです。 #include &amp;lt;boost/multi_array.hpp&amp;gt; int main() { boost::multi_array&amp;lt;float, 2&amp;gt; arr(boost::extents[10][20]); return 0; } また、ex</description>
    </item>
    
    <item>
      <title>pycodestyle (pep8) で E501 line too long を無視する方法</title>
      <link>https://yokaze.github.io/2017/09/08/</link>
      <pubDate>Fri, 08 Sep 2017 20:07:56 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/08/</guid>
      <description>Python の標準コーディング規約 &amp;ldquo;PEP 8&amp;rdquo; には一行あたりの文字数制限があります。 一行最大79文字と、ちょっと厳しい。 これを無視するには、pycodesty</description>
    </item>
    
    <item>
      <title>ローカルの Hugo サーバーに携帯端末 (iOS, Android) からアクセスする方法</title>
      <link>https://yokaze.github.io/2017/09/07/</link>
      <pubDate>Thu, 07 Sep 2017 18:27:23 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/07/</guid>
      <description>bind, baseURL オプションを指定して hugo server を起動する。 $ hugo server --bind=&amp;quot;0.0.0.0&amp;quot; --baseURL=&amp;quot;http://[HOSTNAME]/&amp;quot; HOSTNAME には自分のマシンの名前を入れてください。 config.toml は Web サイトをビルドするためのもので、hugo を</description>
    </item>
    
    <item>
      <title>Boost.MultiArray の添字演算子について</title>
      <link>https://yokaze.github.io/2017/08/18/</link>
      <pubDate>Fri, 18 Aug 2017 18:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/08/18/</guid>
      <description>Boost.MultiArray が添え字の境界チェックをしているのかよく分からなかったので、調べてみた。 リファレンスには次のように書かれている。 By default, the array access methods operator() and operator[] perform range checking. If</description>
    </item>
    
  </channel>
</rss>