<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング on yokaze.github.io</title>
    <link>https://yokaze.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in プログラミング on yokaze.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Rue Yokaze</copyright>
    <lastBuildDate>Fri, 07 Sep 2018 21:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://yokaze.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>clang でループ式が実行されない場合に警告を出す (-Wunreachable-code-loop-increment)</title>
      <link>https://yokaze.github.io/2018/09/07/</link>
      <pubDate>Fri, 07 Sep 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/07/</guid>
      <description>clang でループ式が実行されない場合に警告を出すには、-Wunreachable-code-loop-increment オプションを指定します。 int</description>
    </item>
    
    <item>
      <title>pyscience11 で C&#43;&#43; から SciPy と Matplotlib を使う</title>
      <link>https://yokaze.github.io/2018/04/12/</link>
      <pubDate>Thu, 12 Apr 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/04/12/</guid>
      <description>私事ですが、GitHub で pyscience11 というライブラリを公開しています。 このライブラリは Header-Only で、C++ から NumPy, SciPy, Matplotlib を手軽に使うことができます。 動作には pybind11 が</description>
    </item>
    
    <item>
      <title>pybind11 でキーワード引数 (kwargs) を使う</title>
      <link>https://yokaze.github.io/2018/03/08/</link>
      <pubDate>Thu, 08 Mar 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/03/08/</guid>
      <description>pybind11 でキーワード引数 (kwargs) を指定するには、pybind11::arg を使います。 #include &amp;lt;pybind11/embed.h&amp;gt; #include &amp;lt;pybind11/pybind11.h&amp;gt; namespace py = pybind11; int main() { // python インタプリタを起動する py::scoped_interpreter interpreter; // numpy の各種オブ</description>
    </item>
    
    <item>
      <title>pybind11 で main モジュール上に関数を定義する</title>
      <link>https://yokaze.github.io/2018/03/05/</link>
      <pubDate>Mon, 05 Mar 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/03/05/</guid>
      <description>pybind11 で main モジュール上に関数を定義するには、pybind11::module::def 関数を使います。 次の例では、C++ で定義した hello 関数を Python スク</description>
    </item>
    
    <item>
      <title>二重ポインタの const 早見表</title>
      <link>https://yokaze.github.io/2018/02/28/</link>
      <pubDate>Wed, 28 Feb 2018 20:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/28/</guid>
      <description>多重ポインタの const の付け方をまとめました。 まずは普通のポインタから。 int main() { const int* x = new int(0); // ポインタの指す内容を書き換えることができない int* const y = new</description>
    </item>
    
    <item>
      <title>pybind11 上の matplotlib で macosx バックエンドを使う</title>
      <link>https://yokaze.github.io/2018/02/24/</link>
      <pubDate>Sat, 24 Feb 2018 12:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/24/</guid>
      <description>macOS 上で matplotlib を立ち上げると、Python is not installed as a framework というエラーが出ることがあります。 この問題は（環境によるのかもしれませんが）以下の方法で再現</description>
    </item>
    
    <item>
      <title>mac に xtensor をインストールする</title>
      <link>https://yokaze.github.io/2018/02/12/</link>
      <pubDate>Mon, 12 Feb 2018 20:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/12/</guid>
      <description>xtensor は C++ で多次元配列を扱うためのライブラリです。 このライブラリは Homebrew または Anaconda を使ってインストールすることができます。 Homebrew でインストール Homebrew は mac 環境の</description>
    </item>
    
    <item>
      <title>pybind11 で C&#43;&#43; から Python インタプリタを実行する</title>
      <link>https://yokaze.github.io/2018/02/11/</link>
      <pubDate>Sun, 11 Feb 2018 11:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/11/</guid>
      <description>pybind11 の pybind11::scoped_interpreter を使うと、C++ から Python インタプリタを起動することができます。 #include &amp;lt;pybind11/embed.h&amp;gt; #include &amp;lt;pybind11/pybind11.h&amp;gt; namespace py = pybind11; int main() { py::scoped_interpreter interpreter; py::print(&amp;quot;Hello, world!&amp;quot;); return 0; } コンパイルには Python.h が必要です。 端末上に複</description>
    </item>
    
    <item>
      <title>mac に pybind11 をインストールする</title>
      <link>https://yokaze.github.io/2018/02/05/</link>
      <pubDate>Mon, 05 Feb 2018 22:36:44 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/05/</guid>
      <description>pybind11 は Homebrew, pip3, Anaconda のいずれかの方法でインストールできます。 Homebrew でインストール Homebrew は mac 環境の汎用パッケージマネージャーです。 Homebrew を使って pybind11 をインストールする</description>
    </item>
    
    <item>
      <title>pip のディストリビューションがインストールしたファイルの一覧を表示する</title>
      <link>https://yokaze.github.io/2018/02/04/</link>
      <pubDate>Sun, 04 Feb 2018 21:39:56 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/04/</guid>
      <description>ディストリビューション（パッケージ）がインストールしたファイルの一覧は、インストール時に作成される RECORD ファイルに記録されています。 はじめに、p</description>
    </item>
    
    <item>
      <title>clang でシフト演算のビット数超過を警告する (-Wshift-count-overflow)</title>
      <link>https://yokaze.github.io/2018/01/29/</link>
      <pubDate>Mon, 29 Jan 2018 00:17:55 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/29/</guid>
      <description>clang でシフト演算のビット数超過を警告するには、-Wshift-count-overflow オプションを指定します。 #include &amp;lt;stdio.h&amp;gt; int main() { int x = 8; int y = x &amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>clang で range-based for の暗黙コピーを警告する (-Wrange-loop-analysis)</title>
      <link>https://yokaze.github.io/2018/01/28/</link>
      <pubDate>Sun, 28 Jan 2018 19:48:59 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/28/</guid>
      <description>clang で range-based for の暗黙コピーを警告するには、-Wrange-loop-analysis オプションを指定します。 次の例では const pair&amp;lt;const int, int&amp;gt;&amp;amp; で値を受け取るべきと</description>
    </item>
    
    <item>
      <title>swiftc で Hello World</title>
      <link>https://yokaze.github.io/2018/01/22/</link>
      <pubDate>Mon, 22 Jan 2018 22:07:42 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/22/</guid>
      <description>swiftc コマンドで Hello world プログラムをビルドします。 print(&amp;quot;Hello world!&amp;quot;) $ swiftc sample.swift $ ./sample Hello world! swift コマンドを使うとコンソールから直接実行することもできます。 $ swift sample.swift Hello world! Tweet 参考資料</description>
    </item>
    
    <item>
      <title>clang で負のビットシフトを警告する (-Wshift-count-negative)</title>
      <link>https://yokaze.github.io/2018/01/18/</link>
      <pubDate>Thu, 18 Jan 2018 22:55:39 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/18/</guid>
      <description>clang で負のビットシフトを警告するには、-Wshift-count-negative オプションを指定します。 #include &amp;lt;stdio.h&amp;gt; int main() { int x = 8; int y = x &amp;lt;&amp;lt; -1; printf(&amp;quot;%d\n&amp;quot;, y); return</description>
    </item>
    
    <item>
      <title>clang で 暗黙の符号変換を警告する (-Wsign-conversion)</title>
      <link>https://yokaze.github.io/2018/01/17/</link>
      <pubDate>Wed, 17 Jan 2018 20:41:18 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/17/</guid>
      <description>clang で暗黙の符号変換を警告するには、-Wsign-conversion オプションを指定します。 int main() { unsigned int x = -1; return 0; } $ # macOS Sierra (10.12) $ clang sample.cpp -Wsign-conversion sample.cpp:3:22: warning: implicit conversion</description>
    </item>
    
    <item>
      <title>clang で 64bit 整数から 32bit 整数への暗黙の型変換を警告する (-Wshorten-64-to-32)</title>
      <link>https://yokaze.github.io/2018/01/16/</link>
      <pubDate>Tue, 16 Jan 2018 21:24:17 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/16/</guid>
      <description>clang で 64bit 整数から 32bit 整数への暗黙の型変換を警告するには、-Wshorten-64-to-32 オプションを指定します。 #include &amp;lt;stdint.h&amp;gt; int main() { int64_t x = 1; int32_t y = x; return</description>
    </item>
    
    <item>
      <title>lldb で使えるコマンド一覧</title>
      <link>https://yokaze.github.io/2018/01/06/</link>
      <pubDate>Sat, 06 Jan 2018 14:01:24 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/06/</guid>
      <description>lldb で入力できるコマンドをまとめました。 lldb のコマンド一覧（英語）は help コマンドで表示できます。 日本語訳は新規に書き起こしました。 $ # macOS Sierra (10.12) + Homebrew $</description>
    </item>
    
    <item>
      <title>carthage 本体を更新する</title>
      <link>https://yokaze.github.io/2017/10/23/</link>
      <pubDate>Mon, 23 Oct 2017 19:43:11 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/23/</guid>
      <description>はじめに、Homebrew をアップデートします。 $ # macOS Sierra (10.12) + Homebrew $ brew update carthage の更新があるかどうかを確認します。 brew outdated で表示される場合、パッケージが更</description>
    </item>
    
    <item>
      <title>clang で未使用のマクロを警告する (-Wunused-macros)</title>
      <link>https://yokaze.github.io/2017/10/06/</link>
      <pubDate>Fri, 06 Oct 2017 17:51:02 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/06/</guid>
      <description>clang で未使用のマクロを警告するには、-Wunused-macros オプションを指定します。 #define MY_UNUSED_MACRO int main(void) { return 0; } $ # macOS Sierra (10.12) + Homebrew $ clang sample.cpp -Wunused-macros sample.cpp:1:9: warning: macro is not used [-Wunused-macros]</description>
    </item>
    
    <item>
      <title>flake8 で hacking の警告を一時的に無効にする</title>
      <link>https://yokaze.github.io/2017/10/04/</link>
      <pubDate>Wed, 04 Oct 2017 18:17:33 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/04/</guid>
      <description>Python 向け Lint ツール flake8 のプラグインとして使える hacking ですが、警告がかなり厳しいため一時的に無効にしたいことがあります。 $ # flake8, hacking をインストール $ pip install flake8 $</description>
    </item>
    
    <item>
      <title>pipdeptree を Python 2 と Python 3 に同時にインストールする</title>
      <link>https://yokaze.github.io/2017/10/02/</link>
      <pubDate>Mon, 02 Oct 2017 21:09:47 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/02/</guid>
      <description>pipdeptree を使うと、pip でインストールしたパッケージの依存関係を調べることができます。 $ # macOS Sierra (10.12) + Homebrew $ $ # Python2 用のソフトウェアをインストール $ pip install pipdeptree</description>
    </item>
    
    <item>
      <title>mac で PIL (Python Imaging Library) を使う</title>
      <link>https://yokaze.github.io/2017/09/23/</link>
      <pubDate>Sat, 23 Sep 2017 10:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/23/</guid>
      <description>Ubuntu 環境にはデフォルトで入っていることが多い PIL (Pillow) ですが、mac にはプリインストールされないため別途インストールが必要です。 $ # macOS Sierra (10.12) + Homebrew $ python Python</description>
    </item>
    
    <item>
      <title>clang でマクロの再定義を警告する (-Wmacro-redefined)</title>
      <link>https://yokaze.github.io/2017/09/21/</link>
      <pubDate>Thu, 21 Sep 2017 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/21/</guid>
      <description>clang でマクロの再定義を警告するには、-Wmacro-redefined オプションを指定します。 #define MY_DEFINE 111 #define MY_DEFINE 222 int main(void) { return 0; } $ # macOS Sierra (10.12) + Homebrew $ clang sample.cpp -Wmacro-redefined sample.cpp:2:9:</description>
    </item>
    
    <item>
      <title>Python でインストール済みモジュールをデバッグする</title>
      <link>https://yokaze.github.io/2017/09/19/</link>
      <pubDate>Tue, 19 Sep 2017 21:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/19/</guid>
      <description>pdb, pip などのインストール済みモジュールを直接デバッグする方法。 モジュールの動作を細かく調べたい時に役立ちます。 $ # 強引に書くとおこられる $ python3 -m</description>
    </item>
    
    <item>
      <title>Homebrew で python3 用の Boost.Python をインストールする</title>
      <link>https://yokaze.github.io/2017/09/15/</link>
      <pubDate>Fri, 15 Sep 2017 18:34:38 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/15/</guid>
      <description>$ brew install boost-python --with-python3 なのだが、すこしハマりどころがある。 brew install boost-python のオプション brew install にはオプションを指定できる場合がある。 boost-python の場合は --with-python3 オプションが使える。 brew</description>
    </item>
    
    <item>
      <title>boost::indices の解説</title>
      <link>https://yokaze.github.io/2017/09/13/</link>
      <pubDate>Wed, 13 Sep 2017 23:00:13 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/13/</guid>
      <description>前回 の続きです。 boost::indices は、boost::multi_array の部分ビューを作るためのオブジェクトです。 部分ビューでは、元の配列の一部を仮想的な</description>
    </item>
    
    <item>
      <title>boost::extents の解説</title>
      <link>https://yokaze.github.io/2017/09/11/</link>
      <pubDate>Mon, 11 Sep 2017 21:57:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/11/</guid>
      <description>boost::extents は、boost::multi_array の各次元の有効なインデックス範囲を指定するためのオブジェクトです。 #include &amp;lt;boost/multi_array.hpp&amp;gt; int main() { boost::multi_array&amp;lt;float, 2&amp;gt; arr(boost::extents[10][20]); return 0; } また、ex</description>
    </item>
    
    <item>
      <title>pycodestyle (pep8) で E501 line too long を無視する方法</title>
      <link>https://yokaze.github.io/2017/09/08/</link>
      <pubDate>Fri, 08 Sep 2017 20:07:56 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/08/</guid>
      <description>Python の標準コーディング規約 &amp;ldquo;PEP 8&amp;rdquo; には一行あたりの文字数制限があります。 一行最大79文字と、ちょっと厳しい。 これを無視するには、pycodesty</description>
    </item>
    
    <item>
      <title>ローカルの Hugo サーバーに携帯端末 (iOS, Android) からアクセスする方法</title>
      <link>https://yokaze.github.io/2017/09/07/</link>
      <pubDate>Thu, 07 Sep 2017 18:27:23 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/07/</guid>
      <description>bind, baseURL オプションを指定して hugo server を起動する。 $ hugo server --bind=&amp;quot;0.0.0.0&amp;quot; --baseURL=&amp;quot;http://[HOSTNAME]/&amp;quot; HOSTNAME には自分のマシンの名前を入れてください。 config.toml は Web サイトをビルドするためのもので、hugo を</description>
    </item>
    
    <item>
      <title>Boost.MultiArray の添字演算子について</title>
      <link>https://yokaze.github.io/2017/08/18/</link>
      <pubDate>Fri, 18 Aug 2017 18:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/08/18/</guid>
      <description>Boost.MultiArray が添え字の境界チェックをしているのかよく分からなかったので、調べてみた。 リファレンスには次のように書かれている。 By default, the array access methods operator() and operator[] perform range checking. If</description>
    </item>
    
  </channel>
</rss>