<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yokaze.github.io</title>
    <link>https://yokaze.github.io/</link>
    <description>Recent content on yokaze.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Rue Yokaze</copyright>
    <lastBuildDate>Sat, 17 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yokaze.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>yq コマンドで Kubernetes の YAML を操作する</title>
      <link>https://yokaze.github.io/2021/04/17/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2021/04/17/</guid>
      <description>yq は YAML を操作できるコマンドラインツールで、Kubernetes 用のマニフェストの確認やクラスタの状態確認に利用できます。 この記事では yq の基本</description>
    </item>
    
    <item>
      <title>kind 環境に Grafana をデプロイする</title>
      <link>https://yokaze.github.io/2021/03/08/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2021/03/08/</guid>
      <description>kind で作った Kubernetes クラスタに Grafana をデプロイする方法を解説します。 Prometheus のデプロイ 前回の記事 の内容に沿って kind クラスタを立ち上げ、Prometheus をデプ</description>
    </item>
    
    <item>
      <title>kind 環境に Prometheus をデプロイする</title>
      <link>https://yokaze.github.io/2021/03/07/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2021/03/07/</guid>
      <description>kind で作った Kubernetes クラスタに Prometheus をデプロイする方法を解説します。 kind クラスタを作る まず kind で Kubernetes クラスタを立ち上げます。クラスタはひとまず 4 ノードで作りま</description>
    </item>
    
    <item>
      <title>Sliced Wasserstein GMM を実装してみた</title>
      <link>https://yokaze.github.io/2019/09/12/</link>
      <pubDate>Thu, 12 Sep 2019 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2019/09/12/</guid>
      <description>最近話題の Sliced Wasserstein Distance (SWD) [Deshpande 2018, Deshpande 2019] を理解するため、 Kolouri らの Sliced Wasserstein Distance for Learning Gaussian Mixture Models (SWGMM) を実装しました。 以前の記事で Wasserstein 距離の解説 を書いたので、こちらも是非ご参照く</description>
    </item>
    
    <item>
      <title>TensorFlow 2.0 で混合ガウス分布 (GMM) を推定する</title>
      <link>https://yokaze.github.io/2019/08/30/</link>
      <pubDate>Fri, 30 Aug 2019 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2019/08/30/</guid>
      <description>TensorFlow 2.0 の練習を兼ねて、混合ガウス分布 (GMM) を実装しました。 ページの末尾 に EM, Adam, RMSprop の比較アニメーションを載せています。 問題設定 GMM は実数値の観測データ $X</description>
    </item>
    
    <item>
      <title>線形位相空間の原点の近傍が併呑集合であることを証明する</title>
      <link>https://yokaze.github.io/2019/08/23/</link>
      <pubDate>Fri, 23 Aug 2019 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2019/08/23/</guid>
      <description>基本的な事柄ですが、証明が見つからなかったので勉強を兼ねて証明してみます。 補題 線形位相空間 (topological vector space, tvs) $X$ において、実数 $a$ と $X$ の任意の元 $x$ の積 $ax$ は</description>
    </item>
    
    <item>
      <title>TensorFlow 2.0 で非負値行列因子分解 (NMF) を解く</title>
      <link>https://yokaze.github.io/2019/08/12/</link>
      <pubDate>Mon, 12 Aug 2019 15:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2019/08/12/</guid>
      <description>TensorFlow 2.0 の練習を兼ねて、非負値行列因子分解 (NMF) を実装しました。 問題設定 NMF は非負値行列 $X \in \mathbb{R}^{T \times F}$ を二つの低ランク行列の積 $WH$ で近似するアルゴリズムで、</description>
    </item>
    
    <item>
      <title>TensorFlow 2.0 で Variable を ndarray に変換する</title>
      <link>https://yokaze.github.io/2019/08/07/</link>
      <pubDate>Wed, 07 Aug 2019 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2019/08/07/</guid>
      <description>TensorFlow 2.0 の Variable を ndarray に変換するには tensorflow.Variable.numpy() を使います。 import tensorflow x = tensorflow.Variable(tensorflow.random.uniform([4, 4])) print(x) y = x.numpy() print(y) $ # macOS Mojave (10.14) + TensorFlow 2.0.0b1 $ python3 sample.py &amp;lt;tf.Variable &amp;#39;Variable:0&amp;#39; shape=(4, 4) dtype=float32, numpy= array([[0.4963708 , 0.5265337 , 0.645676 , 0.36317182], [0.88785803, 0.6770747 , 0.34829807, 0.7676312 ], [0.64356697, 0.1472162 , 0.6687521 , 0.6949041 ], [0.9588698 ,</description>
    </item>
    
    <item>
      <title>Monge-Kantorovich の問題を SciPy で解く</title>
      <link>https://yokaze.github.io/2019/07/13/</link>
      <pubDate>Sat, 13 Jul 2019 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2019/07/13/</guid>
      <description>Wasserstein GAN に出てくる最適輸送問題を SciPy で解いてみます。 問題の説明は前回の記事をご覧ください。 問題設定 2つの生産地 A1, A2 から3つの消費地 B1, B2, B3 へ物資を輸</description>
    </item>
    
    <item>
      <title>Wasserstein 計量が距離関数になることを証明する</title>
      <link>https://yokaze.github.io/2019/07/12/</link>
      <pubDate>Fri, 12 Jul 2019 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2019/07/12/</guid>
      <description>ここでは Wasserstein 計量を最適輸送コストから計算し、この計量が距離の定義（補足 1）を満たすことを証明します。 また、Wasserstein 計量が元の空間</description>
    </item>
    
    <item>
      <title>lldb で関数の呼び出し履歴を表示する</title>
      <link>https://yokaze.github.io/2019/07/05/</link>
      <pubDate>Fri, 05 Jul 2019 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2019/07/05/</guid>
      <description>lldb で関数の呼び出し履歴（バックトレース）を表示するには、bt コマンドを使います。 #include &amp;lt;stdio.h&amp;gt; void sample1() { printf(&amp;#34;sample 1\n&amp;#34;); } void sample2() { sample1(); } void sample3() { sample2(); } int main(void) { sample3(); return 0; } $ # Intel Mac +</description>
    </item>
    
    <item>
      <title>clang でソースコードが依存するヘッダー一覧を表示する</title>
      <link>https://yokaze.github.io/2019/07/04/</link>
      <pubDate>Thu, 04 Jul 2019 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2019/07/04/</guid>
      <description>ソースコードが依存するヘッダー一覧を表示するには、-MD オプションを使います。 sample.h #pragma once #include &amp;lt;algorithm&amp;gt;sample.cpp #include &amp;#34;sample.h&amp;#34; int main(void) { printf(&amp;#34;%d\n&amp;#34;, std::min&amp;lt;int&amp;gt;(1, 2)); return 0; } -MF オプションで出力先を指定でき</description>
    </item>
    
    <item>
      <title>carthage のバージョンを確認する</title>
      <link>https://yokaze.github.io/2019/07/02/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2019/07/02/</guid>
      <description>carthage のバージョンを確認するには、carthage version コマンドを使います。 $ # M1 Mac (Monterey) + Carthage 0.38.0 $ carthage version 0.38.0 Tweet 参考資料 Carthage https://github.com/Carthage/Carthage carthage 本体を更新する https://yokaze.github.io/2017/10/23/</description>
    </item>
    
    <item>
      <title>高尾山・城山縦走</title>
      <link>https://yokaze.github.io/2018/10/26/</link>
      <pubDate>Fri, 26 Oct 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/26/</guid>
      <description>FUJIFILM X-T2, XF18-55mm F2.8-4 R LM OIS, 1/80, F5.6, WB 5300K, ASTIA @ 高尾山 先週に引き続き山に登ってきました。 登山靴とストックを手に入れたので、今回は長めに歩いてみます。 登山ルート 高尾</description>
    </item>
    
    <item>
      <title>CMake &#43; Visual Studio でモジュール定義ファイル (.def) を使う</title>
      <link>https://yokaze.github.io/2018/10/13/</link>
      <pubDate>Sat, 13 Oct 2018 12:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/13/</guid>
      <description>CMake でモジュール定義ファイルを使う場合は、.def ファイルをソースコードと同時に指定します。 #include &amp;lt;stdio.h&amp;gt; extern &amp;#34;C&amp;#34; void hello() { printf(&amp;#34;Hello\n&amp;#34;); } エクスポートの設定がない場合、関</description>
    </item>
    
    <item>
      <title>CMake &#43; Visual Studio で特定の警告を無視する</title>
      <link>https://yokaze.github.io/2018/10/11/</link>
      <pubDate>Thu, 11 Oct 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/11/</guid>
      <description>CMake と Visual Studio を併用する際、特定の警告を無視するには /wd オプションを指定します。 次の例では、通常 x の初期化に関する警告が出力されます。 #include &amp;lt;stdio.h&amp;gt; int main(void) { int x;</description>
    </item>
    
    <item>
      <title>lldb の source info コマンドの使い方</title>
      <link>https://yokaze.github.io/2018/10/04/</link>
      <pubDate>Thu, 04 Oct 2018 15:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/04/</guid>
      <description>source info コマンドを使うとデバッグ中のプロセスに関するソースコードの情報を取得することができます。 ここでは、次のソースコードを例として source info コマンド</description>
    </item>
    
    <item>
      <title>はじめての登山道具</title>
      <link>https://yokaze.github.io/2018/10/02/</link>
      <pubDate>Tue, 02 Oct 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/02/</guid>
      <description>FUJIFILM X-T2, XF80mm F2.8 R LM OIS WR Macro, 1/125, F4, WB CUSTOM, ASTIA, Color (-4) @ 神代植物公園 思い立ったので山に登ることにしました。突然何かを始めることが多い。 はるさん @halhorn に道具屋さんに連れ</description>
    </item>
    
    <item>
      <title>早朝の山下公園</title>
      <link>https://yokaze.github.io/2018/09/30/</link>
      <pubDate>Sun, 30 Sep 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/30/</guid>
      <description>横浜の夜明けを撮りに山下公園へ。 FUJIFILM X-T2, XF35mm F1.4 R, 1/125, F1.4, WB 5000K, Classic Chrome @ みなとみらい駅 朝7時のみなとみらい駅。東京郊外からだと始発近くの電車でも夜明けまでに</description>
    </item>
    
    <item>
      <title>clang で初期化されていない変数を使った場合に警告を出す (-Wuninitialized)</title>
      <link>https://yokaze.github.io/2018/09/26/</link>
      <pubDate>Wed, 26 Sep 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/26/</guid>
      <description>clang で初期化されていない変数を使った場合に警告を出すには、-Wuninitialized オプションを指定します。 // Program 1 #include &amp;lt;stdio.h&amp;gt; int main(void) { int x; printf(&amp;#34;%d\n&amp;#34;, x); return 0; }</description>
    </item>
    
    <item>
      <title>lldb のコマンドのオプションを読み解く</title>
      <link>https://yokaze.github.io/2018/09/25/</link>
      <pubDate>Tue, 25 Sep 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/25/</guid>
      <description>lldb のコマンドのヘルプを確認すると、複数の構文が表示されることがあります。 次の例では、ソースコードの情報を取得する source info コマンドについて3つの構</description>
    </item>
    
    <item>
      <title>pybind11 で print 文を使う</title>
      <link>https://yokaze.github.io/2018/09/18/</link>
      <pubDate>Tue, 18 Sep 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/18/</guid>
      <description>pybind11 でオブジェクトの値を表示するには、pybind11::print を使います。 #include &amp;lt;pybind11/embed.h&amp;gt;#include &amp;lt;pybind11/pybind11.h&amp;gt; namespace py = pybind11; int main(void) { py::scoped_interpreter interpreter; py::module sys_module = py::module::import(&amp;#34;sys&amp;#34;); py::print(sys_module); return 0; } $ # macOS High Sierra (10.13) $ clang sample.cpp -std=c++11 -lc++</description>
    </item>
    
    <item>
      <title>clang でループ式が実行されない場合に警告を出す (-Wunreachable-code-loop-increment)</title>
      <link>https://yokaze.github.io/2018/09/07/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/07/</guid>
      <description>clang でループ式が実行されない場合に警告を出すには、-Wunreachable-code-loop-increment オプションを指定します。 sample.cpp</description>
    </item>
    
    <item>
      <title>pyscience11 で C&#43;&#43; から SciPy と Matplotlib を使う</title>
      <link>https://yokaze.github.io/2018/04/12/</link>
      <pubDate>Thu, 12 Apr 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/04/12/</guid>
      <description>私事ですが、GitHub で pyscience11 というライブラリを公開しています。 このライブラリは Header-Only で、C++ から NumPy, SciPy, Matplotlib を手軽に使うことができます。 動作には pybind11 が</description>
    </item>
    
    <item>
      <title>pybind11 でキーワード引数 (kwargs) を使う</title>
      <link>https://yokaze.github.io/2018/03/08/</link>
      <pubDate>Thu, 08 Mar 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/03/08/</guid>
      <description>pybind11 でキーワード引数 (kwargs) を指定するには、pybind11::arg を使います。 #include &amp;lt;pybind11/embed.h&amp;gt;#include &amp;lt;pybind11/pybind11.h&amp;gt; namespace py = pybind11; int main() { // python インタプリタを起動する py::scoped_interpreter interpreter; // numpy の各種オブジ</description>
    </item>
    
    <item>
      <title>pybind11 で main モジュール上に関数を定義する</title>
      <link>https://yokaze.github.io/2018/03/05/</link>
      <pubDate>Mon, 05 Mar 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/03/05/</guid>
      <description>pybind11 で main モジュール上に関数を定義するには、pybind11::module::def 関数を使います。 次の例では、C++ で定義した hello 関数を Python スク</description>
    </item>
    
    <item>
      <title>二重ポインタの const 早見表</title>
      <link>https://yokaze.github.io/2018/02/28/</link>
      <pubDate>Wed, 28 Feb 2018 20:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/28/</guid>
      <description>多重ポインタの const の付け方をまとめました。 まずは普通のポインタから。 int main() { const int* x = new int(0); // ポインタの指す内容を書き換えることができない int* const y = new</description>
    </item>
    
    <item>
      <title>pybind11 上の matplotlib で macosx バックエンドを使う</title>
      <link>https://yokaze.github.io/2018/02/24/</link>
      <pubDate>Sat, 24 Feb 2018 12:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/24/</guid>
      <description>macOS 上で matplotlib を立ち上げると、Python is not installed as a framework というエラーが出ることがあります。 この問題は（環境によるのかもしれませんが）以下の方法で再現</description>
    </item>
    
    <item>
      <title>mac に xtensor をインストールする</title>
      <link>https://yokaze.github.io/2018/02/12/</link>
      <pubDate>Mon, 12 Feb 2018 20:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/12/</guid>
      <description>xtensor は C++ で多次元配列を扱うためのライブラリです。 このライブラリは Homebrew または Anaconda を使ってインストールすることができます。 Homebrew でインストール Homebrew は mac 環境の</description>
    </item>
    
    <item>
      <title>pybind11 で C&#43;&#43; から Python インタプリタを実行する</title>
      <link>https://yokaze.github.io/2018/02/11/</link>
      <pubDate>Sun, 11 Feb 2018 11:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/11/</guid>
      <description>pybind11 の pybind11::scoped_interpreter を使うと、C++ から Python インタプリタを起動することができます。 #include &amp;lt;pybind11/embed.h&amp;gt;#include &amp;lt;pybind11/pybind11.h&amp;gt; namespace py = pybind11; int main() { py::scoped_interpreter interpreter; py::print(&amp;#34;Hello, world!&amp;#34;); return 0; } コンパイルには Python.h が必要です。 端末上に複数</description>
    </item>
    
    <item>
      <title>mac に pybind11 をインストールする</title>
      <link>https://yokaze.github.io/2018/02/05/</link>
      <pubDate>Mon, 05 Feb 2018 22:36:44 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/05/</guid>
      <description>pybind11 は Homebrew, pip3, Anaconda のいずれかの方法でインストールできます。 Homebrew でインストール Homebrew は mac 環境の汎用パッケージマネージャーです。 Homebrew を使って pybind11 をインストールする</description>
    </item>
    
    <item>
      <title>pip のディストリビューションがインストールしたファイルの一覧を表示する</title>
      <link>https://yokaze.github.io/2018/02/04/</link>
      <pubDate>Sun, 04 Feb 2018 21:39:56 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/04/</guid>
      <description>ディストリビューション（パッケージ）がインストールしたファイルの一覧は、インストール時に作成される RECORD ファイルに記録されています。 はじめに、p</description>
    </item>
    
    <item>
      <title>clang でシフト演算のビット数超過を警告する (-Wshift-count-overflow)</title>
      <link>https://yokaze.github.io/2018/01/29/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/29/</guid>
      <description>clang でシフト演算のビット数超過を警告するには、-Wshift-count-overflow オプションを指定します。 #include &amp;lt;stdio.h&amp;gt; int main() { int x = 8; int y = x &amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>clang で range-based for の暗黙コピーを警告する (-Wrange-loop-analysis)</title>
      <link>https://yokaze.github.io/2018/01/28/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/28/</guid>
      <description>clang で range-based for の暗黙コピーを警告するには、-Wrange-loop-analysis オプションを指定します。 次の例では const pair&amp;lt;const int, int&amp;gt;&amp;amp; で値を受け取るべきと</description>
    </item>
    
    <item>
      <title>swiftc で Hello World</title>
      <link>https://yokaze.github.io/2018/01/22/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/22/</guid>
      <description>swiftc コマンドで Hello world プログラムをビルドします。 sample.swift print(&amp;#34;Hello world!&amp;#34;) $ # M1 Mac (Monterey) + Apple Swift 5.6 $ swiftc sample.swift $ ./sample Hello world! swift コマンドを使うとコンソールから直接実行することもできます。</description>
    </item>
    
    <item>
      <title>clang で負のビットシフトを警告する (-Wshift-count-negative)</title>
      <link>https://yokaze.github.io/2018/01/18/</link>
      <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/18/</guid>
      <description>clang で負のビットシフトを警告するには、-Wshift-count-negative オプションを指定します。 #include &amp;lt;stdio.h&amp;gt; int main() { int x = 8; int y = x &amp;lt;&amp;lt; -1; printf(&amp;#34;%d\n&amp;#34;, y); return</description>
    </item>
    
    <item>
      <title>clang で 暗黙の符号変換を警告する (-Wsign-conversion)</title>
      <link>https://yokaze.github.io/2018/01/17/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/17/</guid>
      <description>clang で暗黙の符号変換を警告するには、-Wsign-conversion オプションを指定します。 int main() { unsigned int x = -1; return 0; } $ # M1 Mac (Monterey) + Apple clang 13.1.6 $ clang sample.cpp -Wsign-conversion</description>
    </item>
    
    <item>
      <title>clang で 64bit 整数から 32bit 整数への暗黙の型変換を警告する (-Wshorten-64-to-32)</title>
      <link>https://yokaze.github.io/2018/01/16/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/16/</guid>
      <description>clang で 64bit 整数から 32bit 整数への暗黙の型変換を警告するには、-Wshorten-64-to-32 オプションを指定します。 #include &amp;lt;stdint.h&amp;gt; int main() { int64_t x = 1; int32_t y = x; return</description>
    </item>
    
    <item>
      <title>論文紹介: Feature Learning for Chord Recognition: The Deep Chroma Extractor</title>
      <link>https://yokaze.github.io/2018/01/13/</link>
      <pubDate>Sat, 13 Jan 2018 20:14:37 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/13/</guid>
      <description>ISMIR 2016 で発表された、Deep Learning による和音認識の研究論文を読みました。 論文のモチベーション 著者らはまず、和音認識のレビュー論文 [M. McVicar et. al., 2014] を紹介し</description>
    </item>
    
    <item>
      <title>lldb で使えるコマンド一覧</title>
      <link>https://yokaze.github.io/2018/01/06/</link>
      <pubDate>Sat, 06 Jan 2018 14:01:24 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/06/</guid>
      <description>lldb で入力できるコマンドをまとめました。 lldb のコマンド一覧（英語）は help コマンドで表示できます。 日本語訳は新規に書き起こしました。 $ # macOS Sierra (10.12) + Homebrew $</description>
    </item>
    
    <item>
      <title>論文紹介: Music Emotion Recognition: A State of the Art Review</title>
      <link>https://yokaze.github.io/2018/01/04/</link>
      <pubDate>Thu, 04 Jan 2018 22:14:22 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/04/</guid>
      <description>表題のとおり、音楽感情認識のレビュー論文を読みました。 日本語の資料が少ないので、分かったことを簡単にまとめたいと思います。 章立て この論文は次</description>
    </item>
    
    <item>
      <title>神代植物公園</title>
      <link>https://yokaze.github.io/2017/12/18/</link>
      <pubDate>Mon, 18 Dec 2017 22:52:15 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/12/18/</guid>
      <description>週末は蝋梅の一番花を撮りに出かけました。 FUJIFILM X-T2, XF55-200mm F3.5-4.8 R LM OIS, 1/480, F4.8, ISO200 @ 神代植物公園 まだ本当に咲き始めという感じで、三輪ほど咲いているかどうかというと</description>
    </item>
    
    <item>
      <title>carthage 本体を更新する</title>
      <link>https://yokaze.github.io/2017/10/23/</link>
      <pubDate>Mon, 23 Oct 2017 19:43:11 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/23/</guid>
      <description>はじめに、Homebrew をアップデートします。 $ # macOS Sierra (10.12) + Homebrew $ brew update carthage の更新があるかどうかを確認します。 brew outdated で表示される場合、パッケージが更</description>
    </item>
    
    <item>
      <title>機械学習で役立つ数学参考書のリスト</title>
      <link>https://yokaze.github.io/2017/10/13/</link>
      <pubDate>Fri, 13 Oct 2017 19:07:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/13/</guid>
      <description>普段お世話になっている教科書をまとめてみました。 パターン認識と機械学習 誰もが知っている機械学習の総合教科書です。 基本的な事柄が網羅されていて</description>
    </item>
    
    <item>
      <title>EM アルゴリズム</title>
      <link>https://yokaze.github.io/2017/10/11/</link>
      <pubDate>Wed, 11 Oct 2017 21:32:04 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/11/</guid>
      <description>混合ガウス分布の Expectation-Maximization (EM) アルゴリズムとは、尤度 $$ p(X|\pi, \mu, \lambda) = \prod_{n = 1}^N \sum_{k = 1}^K \pi_k \mathcal{N}(x_n | \mu_k, \lambda_k^{-1}) $$ をなるべく大きくするようなパラメータの組 $(\pi, \mu, \lambda)$ を計算するアルゴリ</description>
    </item>
    
    <item>
      <title>X-T2 を買いました</title>
      <link>https://yokaze.github.io/2017/10/08/</link>
      <pubDate>Sun, 08 Oct 2017 22:42:53 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/08/</guid>
      <description>半年ぐらい悩んでいたんですが、ついに買っちゃいました。 FUJIFILM X-T2, XF55-200mm F3.5-4.8 R LM OIS, 1/1700, F3.5, ISO200 @ 神代植物公園 フジのカメラは RAW よりカメラ内現像の jpg が綺麗なことで有</description>
    </item>
    
    <item>
      <title>clang で未使用のマクロを警告する (-Wunused-macros)</title>
      <link>https://yokaze.github.io/2017/10/06/</link>
      <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/06/</guid>
      <description>clang で未使用のマクロを警告するには、-Wunused-macros オプションを指定します。 #define MY_UNUSED_MACRO int main(void) { return 0; } $ # M1 Mac (Monterey) + Apple clang 13.1.6 $ clang sample.cpp -Wunused-macros sample.cpp:1:9: warning: macro is not</description>
    </item>
    
    <item>
      <title>flake8 で hacking の警告を一時的に無効にする</title>
      <link>https://yokaze.github.io/2017/10/04/</link>
      <pubDate>Wed, 04 Oct 2017 18:17:33 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/04/</guid>
      <description>Python 向け Lint ツール flake8 のプラグインとして使える hacking ですが、警告がかなり厳しいため一時的に無効にしたいことがあります。 $ # flake8, hacking をインストール $ pip install flake8 $</description>
    </item>
    
    <item>
      <title>pipdeptree を Python 2 と Python 3 に同時にインストールする</title>
      <link>https://yokaze.github.io/2017/10/02/</link>
      <pubDate>Mon, 02 Oct 2017 21:09:47 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/10/02/</guid>
      <description>pipdeptree を使うと、pip でインストールしたパッケージの依存関係を調べることができます。 $ # macOS Sierra (10.12) + Homebrew $ $ # Python2 用のソフトウェアをインストール $ pip install pipdeptree</description>
    </item>
    
    <item>
      <title>mac に最新の NumPy (SciPy) をインストールする</title>
      <link>https://yokaze.github.io/2017/09/27/</link>
      <pubDate>Wed, 27 Sep 2017 19:27:42 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/27/</guid>
      <description>かつて macOS 付属の Python 2 には NumPy, SciPy, matplotlib がプリインストールされていたのですが、Python 3 にはインストールされていないため使う場合はインストールが必要</description>
    </item>
    
    <item>
      <title>mac で PIL (Python Imaging Library) を使う</title>
      <link>https://yokaze.github.io/2017/09/23/</link>
      <pubDate>Sat, 23 Sep 2017 10:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/23/</guid>
      <description>Ubuntu 環境にはデフォルトで入っている PIL (Pillow) ですが、mac にはプリインストールされていないため別途インストールが必要です。 $ # M1 Mac (Monterey) + Python 3.8.9 + pip 22.0.4 $ python3</description>
    </item>
    
    <item>
      <title>clang でマクロの再定義を警告する (-Wmacro-redefined)</title>
      <link>https://yokaze.github.io/2017/09/21/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/21/</guid>
      <description>clang でマクロの再定義を警告するには、-Wmacro-redefined オプションを指定します。 #define MY_DEFINE 111 #define MY_DEFINE 222 int main(void) { return 0; } $ # M1 Mac (Monterey) + Apple clang 13.1.6 $ clang sample.cpp</description>
    </item>
    
    <item>
      <title>Python でインストール済みモジュールをデバッグする</title>
      <link>https://yokaze.github.io/2017/09/19/</link>
      <pubDate>Tue, 19 Sep 2017 21:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/19/</guid>
      <description>Python でインストール済みモジュールの動作を調べたい時は、-m pdb オプションに続けて -m &amp;lt;Module Name&amp;gt; を指定します。 この機能は Python 3.7 以降 で使えます。 $ # Intel Mac + macOS Big</description>
    </item>
    
    <item>
      <title>mac に SciPy がプリインストールされているか調べる</title>
      <link>https://yokaze.github.io/2017/09/17/</link>
      <pubDate>Sun, 17 Sep 2017 10:32:57 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/17/</guid>
      <description>手元の環境 (macOS 10.12 Sierra) に入っている SciPy がプリインストールされたものか、自分でインストールしたものか分からなくなったので調査しました。 まずは sys.path から。 ス</description>
    </item>
    
    <item>
      <title>Homebrew で python3 用の Boost.Python をインストールする</title>
      <link>https://yokaze.github.io/2017/09/15/</link>
      <pubDate>Fri, 15 Sep 2017 18:34:38 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/15/</guid>
      <description>$ brew install boost-python --with-python3 なのだが、すこしハマりどころがある。 brew install boost-python のオプション brew install にはオプションを指定できる場合がある。 boost-python の場合は --with-python3 オプションが使える。 brew</description>
    </item>
    
    <item>
      <title>boost::indices の解説</title>
      <link>https://yokaze.github.io/2017/09/13/</link>
      <pubDate>Wed, 13 Sep 2017 23:00:13 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/13/</guid>
      <description>前回 の続きです。 boost::indices は、boost::multi_array の部分ビューを作るためのオブジェクトです。 部分ビューでは、元の配列の一部を仮想的な</description>
    </item>
    
    <item>
      <title>boost::extents の解説</title>
      <link>https://yokaze.github.io/2017/09/11/</link>
      <pubDate>Mon, 11 Sep 2017 21:57:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/11/</guid>
      <description>boost::extents は、boost::multi_array の各次元の有効なインデックス範囲を指定するためのオブジェクトです。 #include &amp;lt;boost/multi_array.hpp&amp;gt; int main() { boost::multi_array&amp;lt;float, 2&amp;gt; arr(boost::extents[10][20]); return 0; } また、ex</description>
    </item>
    
    <item>
      <title>pycodestyle (pep8) で E501 line too long を無視する方法</title>
      <link>https://yokaze.github.io/2017/09/08/</link>
      <pubDate>Fri, 08 Sep 2017 20:07:56 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/08/</guid>
      <description>Python の標準コーディング規約 &amp;ldquo;PEP 8&amp;rdquo; には一行あたりの文字数制限があります。 一行最大79文字と、ちょっと厳しい。 これを無視するには、pycodesty</description>
    </item>
    
    <item>
      <title>ローカルの Hugo サーバーに携帯端末 (iOS, Android) からアクセスする方法</title>
      <link>https://yokaze.github.io/2017/09/07/</link>
      <pubDate>Thu, 07 Sep 2017 18:27:23 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/09/07/</guid>
      <description>bind, baseURL オプションを指定して hugo server を起動する。 $ # Intel Mac + macOS Big Sur (11.2) + Hugo 0.81.0 $ hugo server --bind=&amp;#34;0.0.0.0&amp;#34; --baseURL=&amp;#34;http://[HOSTNAME]/&amp;#34; HOSTNAME には自分のマシンの名前を入れてください。 config.toml は Web サイトをビルドする</description>
    </item>
    
    <item>
      <title>Boost.MultiArray の添字演算子について</title>
      <link>https://yokaze.github.io/2017/08/18/</link>
      <pubDate>Fri, 18 Aug 2017 18:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2017/08/18/</guid>
      <description>Boost.MultiArray が添え字の境界チェックをしているのかよく分からなかったので、調べてみた。 リファレンスには次のように書かれている。 By default, the array access methods operator() and operator[] perform range checking. If</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://yokaze.github.io/about/</link>
      <pubDate>Mon, 01 Jan 2001 00:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/about/</guid>
      <description>夜風 流雨 (Rue Yokaze) 都内でソフトウェアを開発しながら写真を撮っています。 SNS https://twitter.com/chrofieyue https://github.com/yokaze https://www.flickr.com/photos/chrofieyue https://www.instagram.com/chrofieyue Equipment FUJIFILM X-T2 Touit 12mm F2.8 XF16mm F1.4 XF23mm F1.4 XF35mm F1.4 XF56mm F1.2 XF80mm F2.8 Macro XF18-55mm F2.8-4 XF55-200mm F3.5-4.8 XF100-400mm F4.5-5.6 FUJIFILM X-T2, XF80mm F2.8 R LM OIS WR Macro, 1/640,</description>
    </item>
    
    <item>
      <title>ソフトウェア</title>
      <link>https://yokaze.github.io/software/</link>
      <pubDate>Mon, 01 Jan 2001 00:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/software/</guid>
      <description>各種自作ソフトを公開しています。 Sirius マルチプラットフォームで動作するバイナリエディタです。 electron + React で開発しています。 https://github.com/yokaze/sirius pyscience11 C++ から NumPy, SciPy, Matplotlib にアクセスす</description>
    </item>
    
  </channel>
</rss>
