<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2018 on yokaze.github.io</title>
    <link>https://yokaze.github.io/2018/</link>
    <description>Recent content in 2018 on yokaze.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Rue Yokaze</copyright>
    <lastBuildDate>Fri, 26 Oct 2018 21:00:00 +0900</lastBuildDate><atom:link href="https://yokaze.github.io/2018/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>高尾山・城山縦走</title>
      <link>https://yokaze.github.io/2018/10/26/</link>
      <pubDate>Fri, 26 Oct 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/26/</guid>
      <description>FUJIFILM X-T2, XF18-55mm F2.8-4 R LM OIS, 1/80, F5.6, WB 5300K, ASTIA @ 高尾山 先週に引き続き山に登ってきました。 登山靴とストックを手に入れたので、今回は長めに歩いてみます。 登山ルート 高尾</description>
    </item>
    
    <item>
      <title>CMake &#43; Visual Studio でモジュール定義ファイル (.def) を使う</title>
      <link>https://yokaze.github.io/2018/10/13/</link>
      <pubDate>Sat, 13 Oct 2018 12:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/13/</guid>
      <description>CMake でモジュール定義ファイルを使う場合は、.def ファイルをソースコードと同時に指定します。 #include &amp;lt;stdio.h&amp;gt; extern &amp;#34;C&amp;#34; void hello() { printf(&amp;#34;Hello\n&amp;#34;); } エクスポートの設定がない場合、関</description>
    </item>
    
    <item>
      <title>CMake &#43; Visual Studio で特定の警告を無視する</title>
      <link>https://yokaze.github.io/2018/10/11/</link>
      <pubDate>Thu, 11 Oct 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/11/</guid>
      <description>CMake と Visual Studio を併用する際、特定の警告を無視するには /wd オプションを指定します。 次の例では、通常 x の初期化に関する警告が出力されます。 #include &amp;lt;stdio.h&amp;gt; int main(void) { int x;</description>
    </item>
    
    <item>
      <title>lldb の source info コマンドの使い方</title>
      <link>https://yokaze.github.io/2018/10/04/</link>
      <pubDate>Thu, 04 Oct 2018 15:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/04/</guid>
      <description>source info コマンドを使うとデバッグ中のプロセスに関するソースコードの情報を取得することができます。 ここでは、次のソースコードを例として source info コマンド</description>
    </item>
    
    <item>
      <title>はじめての登山道具</title>
      <link>https://yokaze.github.io/2018/10/02/</link>
      <pubDate>Tue, 02 Oct 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/10/02/</guid>
      <description>FUJIFILM X-T2, XF80mm F2.8 R LM OIS WR Macro, 1/125, F4, WB CUSTOM, ASTIA, Color (-4) @ 神代植物公園 思い立ったので山に登ることにしました。突然何かを始めることが多い。 はるさん @halhorn に道具屋さんに連れ</description>
    </item>
    
    <item>
      <title>早朝の山下公園</title>
      <link>https://yokaze.github.io/2018/09/30/</link>
      <pubDate>Sun, 30 Sep 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/30/</guid>
      <description>横浜の夜明けを撮りに山下公園へ。 FUJIFILM X-T2, XF35mm F1.4 R, 1/125, F1.4, WB 5000K, Classic Chrome @ みなとみらい駅 朝7時のみなとみらい駅。東京郊外からだと始発近くの電車でも夜明けまでに</description>
    </item>
    
    <item>
      <title>clang で初期化されていない変数を使った場合に警告を出す (-Wuninitialized)</title>
      <link>https://yokaze.github.io/2018/09/26/</link>
      <pubDate>Wed, 26 Sep 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/26/</guid>
      <description>clang で初期化されていない変数を使った場合に警告を出すには、-Wuninitialized オプションを指定します。 // Program 1 #include &amp;lt;stdio.h&amp;gt; int main(void) { int x; printf(&amp;#34;%d\n&amp;#34;, x); return 0; }</description>
    </item>
    
    <item>
      <title>lldb のコマンドのオプションを読み解く</title>
      <link>https://yokaze.github.io/2018/09/25/</link>
      <pubDate>Tue, 25 Sep 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/25/</guid>
      <description>lldb のコマンドのヘルプを確認すると、複数の構文が表示されることがあります。 次の例では、ソースコードの情報を取得する source info コマンドについて3つの構</description>
    </item>
    
    <item>
      <title>pybind11 で print 文を使う</title>
      <link>https://yokaze.github.io/2018/09/18/</link>
      <pubDate>Tue, 18 Sep 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/18/</guid>
      <description>pybind11 でオブジェクトの値を表示するには、pybind11::print を使います。 #include &amp;lt;pybind11/embed.h&amp;gt;#include &amp;lt;pybind11/pybind11.h&amp;gt; namespace py = pybind11; int main(void) { py::scoped_interpreter interpreter; py::module sys_module = py::module::import(&amp;#34;sys&amp;#34;); py::print(sys_module); return 0; } $ # macOS High Sierra (10.13) $ clang sample.cpp -std=c++11 -lc++</description>
    </item>
    
    <item>
      <title>clang でループ式が実行されない場合に警告を出す (-Wunreachable-code-loop-increment)</title>
      <link>https://yokaze.github.io/2018/09/07/</link>
      <pubDate>Fri, 07 Sep 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/09/07/</guid>
      <description>clang でループ式が実行されない場合に警告を出すには、-Wunreachable-code-loop-increment オプションを指定します。 int</description>
    </item>
    
    <item>
      <title>pyscience11 で C&#43;&#43; から SciPy と Matplotlib を使う</title>
      <link>https://yokaze.github.io/2018/04/12/</link>
      <pubDate>Thu, 12 Apr 2018 18:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/04/12/</guid>
      <description>私事ですが、GitHub で pyscience11 というライブラリを公開しています。 このライブラリは Header-Only で、C++ から NumPy, SciPy, Matplotlib を手軽に使うことができます。 動作には pybind11 が</description>
    </item>
    
    <item>
      <title>pybind11 でキーワード引数 (kwargs) を使う</title>
      <link>https://yokaze.github.io/2018/03/08/</link>
      <pubDate>Thu, 08 Mar 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/03/08/</guid>
      <description>pybind11 でキーワード引数 (kwargs) を指定するには、pybind11::arg を使います。 #include &amp;lt;pybind11/embed.h&amp;gt;#include &amp;lt;pybind11/pybind11.h&amp;gt; namespace py = pybind11; int main() { // python インタプリタを起動する py::scoped_interpreter interpreter; // numpy の各種オブジ</description>
    </item>
    
    <item>
      <title>pybind11 で main モジュール上に関数を定義する</title>
      <link>https://yokaze.github.io/2018/03/05/</link>
      <pubDate>Mon, 05 Mar 2018 21:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/03/05/</guid>
      <description>pybind11 で main モジュール上に関数を定義するには、pybind11::module::def 関数を使います。 次の例では、C++ で定義した hello 関数を Python スク</description>
    </item>
    
    <item>
      <title>二重ポインタの const 早見表</title>
      <link>https://yokaze.github.io/2018/02/28/</link>
      <pubDate>Wed, 28 Feb 2018 20:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/28/</guid>
      <description>多重ポインタの const の付け方をまとめました。 まずは普通のポインタから。 int main() { const int* x = new int(0); // ポインタの指す内容を書き換えることができない int* const y = new</description>
    </item>
    
    <item>
      <title>pybind11 上の matplotlib で macosx バックエンドを使う</title>
      <link>https://yokaze.github.io/2018/02/24/</link>
      <pubDate>Sat, 24 Feb 2018 12:00:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/24/</guid>
      <description>macOS 上で matplotlib を立ち上げると、Python is not installed as a framework というエラーが出ることがあります。 この問題は（環境によるのかもしれませんが）以下の方法で再現</description>
    </item>
    
    <item>
      <title>mac に xtensor をインストールする</title>
      <link>https://yokaze.github.io/2018/02/12/</link>
      <pubDate>Mon, 12 Feb 2018 20:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/12/</guid>
      <description>xtensor は C++ で多次元配列を扱うためのライブラリです。 このライブラリは Homebrew または Anaconda を使ってインストールすることができます。 Homebrew でインストール Homebrew は mac 環境の</description>
    </item>
    
    <item>
      <title>pybind11 で C&#43;&#43; から Python インタプリタを実行する</title>
      <link>https://yokaze.github.io/2018/02/11/</link>
      <pubDate>Sun, 11 Feb 2018 11:30:00 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/11/</guid>
      <description>pybind11 の pybind11::scoped_interpreter を使うと、C++ から Python インタプリタを起動することができます。 #include &amp;lt;pybind11/embed.h&amp;gt;#include &amp;lt;pybind11/pybind11.h&amp;gt; namespace py = pybind11; int main() { py::scoped_interpreter interpreter; py::print(&amp;#34;Hello, world!&amp;#34;); return 0; } コンパイルには Python.h が必要です。 端末上に複数</description>
    </item>
    
    <item>
      <title>mac に pybind11 をインストールする</title>
      <link>https://yokaze.github.io/2018/02/05/</link>
      <pubDate>Mon, 05 Feb 2018 22:36:44 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/05/</guid>
      <description>pybind11 は Homebrew, pip3, Anaconda のいずれかの方法でインストールできます。 Homebrew でインストール Homebrew は mac 環境の汎用パッケージマネージャーです。 Homebrew を使って pybind11 をインストールする</description>
    </item>
    
    <item>
      <title>pip のディストリビューションがインストールしたファイルの一覧を表示する</title>
      <link>https://yokaze.github.io/2018/02/04/</link>
      <pubDate>Sun, 04 Feb 2018 21:39:56 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/02/04/</guid>
      <description>ディストリビューション（パッケージ）がインストールしたファイルの一覧は、インストール時に作成される RECORD ファイルに記録されています。 はじめに、p</description>
    </item>
    
    <item>
      <title>clang でシフト演算のビット数超過を警告する (-Wshift-count-overflow)</title>
      <link>https://yokaze.github.io/2018/01/29/</link>
      <pubDate>Mon, 29 Jan 2018 00:17:55 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/29/</guid>
      <description>clang でシフト演算のビット数超過を警告するには、-Wshift-count-overflow オプションを指定します。 #include &amp;lt;stdio.h&amp;gt; int main() { int x = 8; int y = x &amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>clang で range-based for の暗黙コピーを警告する (-Wrange-loop-analysis)</title>
      <link>https://yokaze.github.io/2018/01/28/</link>
      <pubDate>Sun, 28 Jan 2018 19:48:59 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/28/</guid>
      <description>clang で range-based for の暗黙コピーを警告するには、-Wrange-loop-analysis オプションを指定します。 次の例では const pair&amp;lt;const int, int&amp;gt;&amp;amp; で値を受け取るべきと</description>
    </item>
    
    <item>
      <title>swiftc で Hello World</title>
      <link>https://yokaze.github.io/2018/01/22/</link>
      <pubDate>Mon, 22 Jan 2018 22:07:42 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/22/</guid>
      <description>swiftc コマンドで Hello world プログラムをビルドします。 print(&amp;#34;Hello world!&amp;#34;) $ # Intel Mac + macOS Big Sur (11.2) + Apple Swift 5.3.2 $ swiftc sample.swift $ ./sample Hello world! swift コマンドを使うとコンソールから直接実行することもでき</description>
    </item>
    
    <item>
      <title>clang で負のビットシフトを警告する (-Wshift-count-negative)</title>
      <link>https://yokaze.github.io/2018/01/18/</link>
      <pubDate>Thu, 18 Jan 2018 22:55:39 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/18/</guid>
      <description>clang で負のビットシフトを警告するには、-Wshift-count-negative オプションを指定します。 #include &amp;lt;stdio.h&amp;gt; int main() { int x = 8; int y = x &amp;lt;&amp;lt; -1; printf(&amp;#34;%d\n&amp;#34;, y); return</description>
    </item>
    
    <item>
      <title>clang で 暗黙の符号変換を警告する (-Wsign-conversion)</title>
      <link>https://yokaze.github.io/2018/01/17/</link>
      <pubDate>Wed, 17 Jan 2018 20:41:18 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/17/</guid>
      <description>clang で暗黙の符号変換を警告するには、-Wsign-conversion オプションを指定します。 int main() { unsigned int x = -1; return 0; } $ # Intel Mac + macOS Big Sur (11.2) + Apple clang 12.0.0</description>
    </item>
    
    <item>
      <title>clang で 64bit 整数から 32bit 整数への暗黙の型変換を警告する (-Wshorten-64-to-32)</title>
      <link>https://yokaze.github.io/2018/01/16/</link>
      <pubDate>Tue, 16 Jan 2018 21:24:17 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/16/</guid>
      <description>clang で 64bit 整数から 32bit 整数への暗黙の型変換を警告するには、-Wshorten-64-to-32 オプションを指定します。 #include &amp;lt;stdint.h&amp;gt; int main() { int64_t x = 1; int32_t y = x; return</description>
    </item>
    
    <item>
      <title>論文紹介: Feature Learning for Chord Recognition: The Deep Chroma Extractor</title>
      <link>https://yokaze.github.io/2018/01/13/</link>
      <pubDate>Sat, 13 Jan 2018 20:14:37 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/13/</guid>
      <description>ISMIR 2016 で発表された、Deep Learning による和音認識の研究論文を読みました。 論文のモチベーション 著者らはまず、和音認識のレビュー論文 [M. McVicar et. al., 2014] を紹介し</description>
    </item>
    
    <item>
      <title>lldb で使えるコマンド一覧</title>
      <link>https://yokaze.github.io/2018/01/06/</link>
      <pubDate>Sat, 06 Jan 2018 14:01:24 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/06/</guid>
      <description>lldb で入力できるコマンドをまとめました。 lldb のコマンド一覧（英語）は help コマンドで表示できます。 日本語訳は新規に書き起こしました。 $ # macOS Sierra (10.12) + Homebrew $</description>
    </item>
    
    <item>
      <title>論文紹介: Music Emotion Recognition: A State of the Art Review</title>
      <link>https://yokaze.github.io/2018/01/04/</link>
      <pubDate>Thu, 04 Jan 2018 22:14:22 +0900</pubDate>
      
      <guid>https://yokaze.github.io/2018/01/04/</guid>
      <description>表題のとおり、音楽感情認識のレビュー論文を読みました。 日本語の資料が少ないので、分かったことを簡単にまとめたいと思います。 章立て この論文は次</description>
    </item>
    
  </channel>
</rss>
